function [VOI, STATES, ALGEBRAIC, CONSTANTS] = mainFunction()
    % This is the "main function".  In Matlab, things work best if you rename this function to match the filename.
   [VOI, STATES, ALGEBRAIC, CONSTANTS] = solveModel();
end

function [algebraicVariableCount] = getAlgebraicVariableCount() 
    % Used later when setting a global variable with the number of algebraic variables.
    % Note: This is not the "main method".  
    algebraicVariableCount =18;
end
% There are a total of 8 entries in each of the rate and state variable arrays.
% There are a total of 10 entries in the constant variable array.
%

function [VOI, STATES, ALGEBRAIC, CONSTANTS] = solveModel()
    % Create ALGEBRAIC of correct size
    global algebraicVariableCount;  algebraicVariableCount = getAlgebraicVariableCount();
    % Initialise constants and state variables
    [INIT_STATES, CONSTANTS] = initConsts;

    % Set timespan to solve over 
    tspan = [0, 500];

    % Set numerical accuracy options for ODE solver
    options = odeset('RelTol', 1e-06, 'AbsTol', 1e-06, 'MaxStep', 1);

    % Solve model with ODE solver
    [VOI, STATES] = ode15s(@(VOI, STATES)computeRates(VOI, STATES, CONSTANTS), tspan, INIT_STATES, options);

    % Compute algebraic variables
    [RATES, ALGEBRAIC] = computeRates(VOI, STATES, CONSTANTS);
    ALGEBRAIC = computeAlgebraic(ALGEBRAIC, CONSTANTS, STATES, VOI);

    % Plot state variables against variable of integration
    [LEGEND_STATES, LEGEND_ALGEBRAIC, LEGEND_VOI, LEGEND_CONSTANTS] = createLegends();
    figure();
    plot(VOI, STATES);
    xlabel(LEGEND_VOI);
    l = legend(LEGEND_STATES);
    set(l,'Interpreter','none');
end

function [LEGEND_STATES, LEGEND_ALGEBRAIC, LEGEND_VOI, LEGEND_CONSTANTS] = createLegends()
    LEGEND_STATES = ''; LEGEND_ALGEBRAIC = ''; LEGEND_VOI = ''; LEGEND_CONSTANTS = '';
    LEGEND_VOI = strpad('time in component environment (ms)');
    LEGEND_STATES(:,1) = strpad('V in component membrane (mV)');
    LEGEND_CONSTANTS(:,1) = strpad('C in component membrane (uF_per_mm2)');
    LEGEND_ALGEBRAIC(:,1) = strpad('i_Na in component sodium_current (uA_per_mm2)');
    LEGEND_ALGEBRAIC(:,15) = strpad('i_s in component slow_inward_current (uA_per_mm2)');
    LEGEND_ALGEBRAIC(:,16) = strpad('i_x1 in component time_dependent_outward_current (uA_per_mm2)');
    LEGEND_ALGEBRAIC(:,17) = strpad('i_K1 in component time_independent_outward_current (uA_per_mm2)');
    LEGEND_ALGEBRAIC(:,18) = strpad('Istim in component stimulus_protocol (uA_per_mm2)');
    LEGEND_CONSTANTS(:,2) = strpad('g_Na in component sodium_current (mS_per_mm2)');
    LEGEND_CONSTANTS(:,3) = strpad('E_Na in component sodium_current (mV)');
    LEGEND_CONSTANTS(:,4) = strpad('g_Nac in component sodium_current (mS_per_mm2)');
    LEGEND_STATES(:,2) = strpad('m in component sodium_current_m_gate (dimensionless)');
    LEGEND_STATES(:,3) = strpad('h in component sodium_current_h_gate (dimensionless)');
    LEGEND_STATES(:,4) = strpad('j in component sodium_current_j_gate (dimensionless)');
    LEGEND_ALGEBRAIC(:,2) = strpad('alpha_m in component sodium_current_m_gate (per_ms)');
    LEGEND_ALGEBRAIC(:,9) = strpad('beta_m in component sodium_current_m_gate (per_ms)');
    LEGEND_ALGEBRAIC(:,3) = strpad('alpha_h in component sodium_current_h_gate (per_ms)');
    LEGEND_ALGEBRAIC(:,10) = strpad('beta_h in component sodium_current_h_gate (per_ms)');
    LEGEND_ALGEBRAIC(:,4) = strpad('alpha_j in component sodium_current_j_gate (per_ms)');
    LEGEND_ALGEBRAIC(:,11) = strpad('beta_j in component sodium_current_j_gate (per_ms)');
    LEGEND_CONSTANTS(:,5) = strpad('g_s in component slow_inward_current (mS_per_mm2)');
    LEGEND_ALGEBRAIC(:,8) = strpad('E_s in component slow_inward_current (mV)');
    LEGEND_STATES(:,5) = strpad('Cai in component slow_inward_current (concentration_units)');
    LEGEND_STATES(:,6) = strpad('d in component slow_inward_current_d_gate (dimensionless)');
    LEGEND_STATES(:,7) = strpad('f in component slow_inward_current_f_gate (dimensionless)');
    LEGEND_ALGEBRAIC(:,5) = strpad('alpha_d in component slow_inward_current_d_gate (per_ms)');
    LEGEND_ALGEBRAIC(:,12) = strpad('beta_d in component slow_inward_current_d_gate (per_ms)');
    LEGEND_ALGEBRAIC(:,6) = strpad('alpha_f in component slow_inward_current_f_gate (per_ms)');
    LEGEND_ALGEBRAIC(:,13) = strpad('beta_f in component slow_inward_current_f_gate (per_ms)');
    LEGEND_STATES(:,8) = strpad('x1 in component time_dependent_outward_current_x1_gate (dimensionless)');
    LEGEND_ALGEBRAIC(:,7) = strpad('alpha_x1 in component time_dependent_outward_current_x1_gate (per_ms)');
    LEGEND_ALGEBRAIC(:,14) = strpad('beta_x1 in component time_dependent_outward_current_x1_gate (per_ms)');
    LEGEND_CONSTANTS(:,6) = strpad('IstimStart in component stimulus_protocol (ms)');
    LEGEND_CONSTANTS(:,7) = strpad('IstimEnd in component stimulus_protocol (ms)');
    LEGEND_CONSTANTS(:,8) = strpad('IstimAmplitude in component stimulus_protocol (uA_per_mm2)');
    LEGEND_CONSTANTS(:,9) = strpad('IstimPeriod in component stimulus_protocol (ms)');
    LEGEND_CONSTANTS(:,10) = strpad('IstimPulseDuration in component stimulus_protocol (ms)');
    LEGEND_RATES(:,1) = strpad('d/dt V in component membrane (mV)');
    LEGEND_RATES(:,2) = strpad('d/dt m in component sodium_current_m_gate (dimensionless)');
    LEGEND_RATES(:,3) = strpad('d/dt h in component sodium_current_h_gate (dimensionless)');
    LEGEND_RATES(:,4) = strpad('d/dt j in component sodium_current_j_gate (dimensionless)');
    LEGEND_RATES(:,5) = strpad('d/dt Cai in component slow_inward_current (concentration_units)');
    LEGEND_RATES(:,6) = strpad('d/dt d in component slow_inward_current_d_gate (dimensionless)');
    LEGEND_RATES(:,7) = strpad('d/dt f in component slow_inward_current_f_gate (dimensionless)');
    LEGEND_RATES(:,8) = strpad('d/dt x1 in component time_dependent_outward_current_x1_gate (dimensionless)');
    LEGEND_STATES  = LEGEND_STATES';
    LEGEND_ALGEBRAIC = LEGEND_ALGEBRAIC';
    LEGEND_RATES = LEGEND_RATES';
    LEGEND_CONSTANTS = LEGEND_CONSTANTS';
end

function [STATES, CONSTANTS] = initConsts()
    VOI = 0; CONSTANTS = []; STATES = []; ALGEBRAIC = [];
    STATES(:,1) = -84.624;
    CONSTANTS(:,1) = 0.01;
    CONSTANTS(:,2) = 4e-2;
    CONSTANTS(:,3) = 50;
    CONSTANTS(:,4) = 3e-5;
    STATES(:,2) = 0.011;
    STATES(:,3) = 0.988;
    STATES(:,4) = 0.975;
    CONSTANTS(:,5) = 9e-4;
    STATES(:,5) = 1e-4;
    STATES(:,6) = 0.003;
    STATES(:,7) = 0.994;
    STATES(:,8) = 0.0001;
    CONSTANTS(:,6) = 10;
    CONSTANTS(:,7) = 50000;
    CONSTANTS(:,8) = 0.5;
    CONSTANTS(:,9) = 1000;
    CONSTANTS(:,10) = 1;
    if (isempty(STATES)), warning('Initial values for states not set');, end
end

function [RATES, ALGEBRAIC] = computeRates(VOI, STATES, CONSTANTS)
    global algebraicVariableCount;
    statesSize = size(STATES);
    statesColumnCount = statesSize(2);
    if ( statesColumnCount == 1)
        STATES = STATES';
        ALGEBRAIC = zeros(1, algebraicVariableCount);
    else
        statesRowCount = statesSize(1);
        ALGEBRAIC = zeros(statesRowCount, algebraicVariableCount);
        RATES = zeros(statesRowCount, statesColumnCount);
    end
    ALGEBRAIC(:,2) = (  - 1.00000.*(STATES(:,1)+47.0000))./(exp(  - 0.100000.*(STATES(:,1)+47.0000)) - 1.00000);
    ALGEBRAIC(:,9) =  40.0000.*exp(  - 0.0560000.*(STATES(:,1)+72.0000));
    RATES(:,2) =  ALGEBRAIC(:,2).*(1.00000 - STATES(:,2)) -  ALGEBRAIC(:,9).*STATES(:,2);
    ALGEBRAIC(:,3) =  0.126000.*exp(  - 0.250000.*(STATES(:,1)+77.0000));
    ALGEBRAIC(:,10) = 1.70000./(exp(  - 0.0820000.*(STATES(:,1)+22.5000))+1.00000);
    RATES(:,3) =  ALGEBRAIC(:,3).*(1.00000 - STATES(:,3)) -  ALGEBRAIC(:,10).*STATES(:,3);
    ALGEBRAIC(:,4) = ( 0.0550000.*exp(  - 0.250000.*(STATES(:,1)+78.0000)))./(exp(  - 0.200000.*(STATES(:,1)+78.0000))+1.00000);
    ALGEBRAIC(:,11) = 0.300000./(exp(  - 0.100000.*(STATES(:,1)+32.0000))+1.00000);
    RATES(:,4) =  ALGEBRAIC(:,4).*(1.00000 - STATES(:,4)) -  ALGEBRAIC(:,11).*STATES(:,4);
    ALGEBRAIC(:,5) = ( 0.0950000.*exp( - (STATES(:,1) - 5.00000)./100.000))./(1.00000+exp( - (STATES(:,1) - 5.00000)./13.8900));
    ALGEBRAIC(:,12) = ( 0.0700000.*exp( - (STATES(:,1)+44.0000)./59.0000))./(1.00000+exp((STATES(:,1)+44.0000)./20.0000));
    RATES(:,6) =  ALGEBRAIC(:,5).*(1.00000 - STATES(:,6)) -  ALGEBRAIC(:,12).*STATES(:,6);
    ALGEBRAIC(:,6) = ( 0.0120000.*exp( - (STATES(:,1)+28.0000)./125.000))./(1.00000+exp((STATES(:,1)+28.0000)./6.67000));
    ALGEBRAIC(:,13) = ( 0.00650000.*exp( - (STATES(:,1)+30.0000)./50.0000))./(1.00000+exp( - (STATES(:,1)+30.0000)./5.00000));
    RATES(:,7) =  ALGEBRAIC(:,6).*(1.00000 - STATES(:,7)) -  ALGEBRAIC(:,13).*STATES(:,7);
    ALGEBRAIC(:,7) = ( 0.000500000.*exp((STATES(:,1)+50.0000)./12.1000))./(1.00000+exp((STATES(:,1)+50.0000)./17.5000));
    ALGEBRAIC(:,14) = ( 0.00130000.*exp( - (STATES(:,1)+20.0000)./16.6700))./(1.00000+exp( - (STATES(:,1)+20.0000)./25.0000));
    RATES(:,8) =  ALGEBRAIC(:,7).*(1.00000 - STATES(:,8)) -  ALGEBRAIC(:,14).*STATES(:,8);
    ALGEBRAIC(:,8) =  - 82.3000 -  13.0287.*log( STATES(:,5).*0.00100000);
    ALGEBRAIC(:,15) =  CONSTANTS(:,5).*STATES(:,6).*STATES(:,7).*(STATES(:,1) - ALGEBRAIC(:,8));
    RATES(:,5) = (  - 0.0100000.*ALGEBRAIC(:,15))./1.00000+ 0.0700000.*(0.000100000 - STATES(:,5));
    ALGEBRAIC(:,1) =  ( CONSTANTS(:,2).*power(STATES(:,2), 3.00000).*STATES(:,3).*STATES(:,4)+CONSTANTS(:,4)).*(STATES(:,1) - CONSTANTS(:,3));
    ALGEBRAIC(:,16) = ( STATES(:,8).*0.00800000.*(exp( 0.0400000.*(STATES(:,1)+77.0000)) - 1.00000))./exp( 0.0400000.*(STATES(:,1)+35.0000));
    ALGEBRAIC(:,17) =  0.00350000.*(( 4.00000.*(exp( 0.0400000.*(STATES(:,1)+85.0000)) - 1.00000))./(exp( 0.0800000.*(STATES(:,1)+53.0000))+exp( 0.0400000.*(STATES(:,1)+53.0000)))+( 0.200000.*(STATES(:,1)+23.0000))./(1.00000 - exp(  - 0.0400000.*(STATES(:,1)+23.0000))));
    ALGEBRAIC(:,18) = piecewise({VOI>=CONSTANTS(:,6)&VOI<=CONSTANTS(:,7)&(VOI - CONSTANTS(:,6)) -  floor((VOI - CONSTANTS(:,6))./CONSTANTS(:,9)).*CONSTANTS(:,9)<=CONSTANTS(:,10), CONSTANTS(:,8) }, 0.00000);
    RATES(:,1) = (ALGEBRAIC(:,18) - (ALGEBRAIC(:,1)+ALGEBRAIC(:,15)+ALGEBRAIC(:,16)+ALGEBRAIC(:,17)))./CONSTANTS(:,1);
   RATES = RATES';
end

% Calculate algebraic variables
function ALGEBRAIC = computeAlgebraic(ALGEBRAIC, CONSTANTS, STATES, VOI)
    ALGEBRAIC(:,2) = (  - 1.00000.*(STATES(:,1)+47.0000))./(exp(  - 0.100000.*(STATES(:,1)+47.0000)) - 1.00000);
    ALGEBRAIC(:,9) =  40.0000.*exp(  - 0.0560000.*(STATES(:,1)+72.0000));
    ALGEBRAIC(:,3) =  0.126000.*exp(  - 0.250000.*(STATES(:,1)+77.0000));
    ALGEBRAIC(:,10) = 1.70000./(exp(  - 0.0820000.*(STATES(:,1)+22.5000))+1.00000);
    ALGEBRAIC(:,4) = ( 0.0550000.*exp(  - 0.250000.*(STATES(:,1)+78.0000)))./(exp(  - 0.200000.*(STATES(:,1)+78.0000))+1.00000);
    ALGEBRAIC(:,11) = 0.300000./(exp(  - 0.100000.*(STATES(:,1)+32.0000))+1.00000);
    ALGEBRAIC(:,5) = ( 0.0950000.*exp( - (STATES(:,1) - 5.00000)./100.000))./(1.00000+exp( - (STATES(:,1) - 5.00000)./13.8900));
    ALGEBRAIC(:,12) = ( 0.0700000.*exp( - (STATES(:,1)+44.0000)./59.0000))./(1.00000+exp((STATES(:,1)+44.0000)./20.0000));
    ALGEBRAIC(:,6) = ( 0.0120000.*exp( - (STATES(:,1)+28.0000)./125.000))./(1.00000+exp((STATES(:,1)+28.0000)./6.67000));
    ALGEBRAIC(:,13) = ( 0.00650000.*exp( - (STATES(:,1)+30.0000)./50.0000))./(1.00000+exp( - (STATES(:,1)+30.0000)./5.00000));
    ALGEBRAIC(:,7) = ( 0.000500000.*exp((STATES(:,1)+50.0000)./12.1000))./(1.00000+exp((STATES(:,1)+50.0000)./17.5000));
    ALGEBRAIC(:,14) = ( 0.00130000.*exp( - (STATES(:,1)+20.0000)./16.6700))./(1.00000+exp( - (STATES(:,1)+20.0000)./25.0000));
    ALGEBRAIC(:,8) =  - 82.3000 -  13.0287.*log( STATES(:,5).*0.00100000);
    ALGEBRAIC(:,15) =  CONSTANTS(:,5).*STATES(:,6).*STATES(:,7).*(STATES(:,1) - ALGEBRAIC(:,8));
    ALGEBRAIC(:,1) =  ( CONSTANTS(:,2).*power(STATES(:,2), 3.00000).*STATES(:,3).*STATES(:,4)+CONSTANTS(:,4)).*(STATES(:,1) - CONSTANTS(:,3));
    ALGEBRAIC(:,16) = ( STATES(:,8).*0.00800000.*(exp( 0.0400000.*(STATES(:,1)+77.0000)) - 1.00000))./exp( 0.0400000.*(STATES(:,1)+35.0000));
    ALGEBRAIC(:,17) =  0.00350000.*(( 4.00000.*(exp( 0.0400000.*(STATES(:,1)+85.0000)) - 1.00000))./(exp( 0.0800000.*(STATES(:,1)+53.0000))+exp( 0.0400000.*(STATES(:,1)+53.0000)))+( 0.200000.*(STATES(:,1)+23.0000))./(1.00000 - exp(  - 0.0400000.*(STATES(:,1)+23.0000))));
    ALGEBRAIC(:,18) = piecewise({VOI>=CONSTANTS(:,6)&VOI<=CONSTANTS(:,7)&(VOI - CONSTANTS(:,6)) -  floor((VOI - CONSTANTS(:,6))./CONSTANTS(:,9)).*CONSTANTS(:,9)<=CONSTANTS(:,10), CONSTANTS(:,8) }, 0.00000);
end

% Compute result of a piecewise function
function x = piecewise(cases, default)
    set = [0];
    for i = 1:2:length(cases)
        if (length(cases{i+1}) == 1)
            x(cases{i} & ~set,:) = cases{i+1};
        else
            x(cases{i} & ~set,:) = cases{i+1}(cases{i} & ~set);
        end
        set = set | cases{i};
        if(set), break, end
    end
    if (length(default) == 1)
        x(~set,:) = default;
    else
        x(~set,:) = default(~set);
    end
end

% Pad out or shorten strings to a set length
function strout = strpad(strin)
    req_length = 160;
    insize = size(strin,2);
    if insize > req_length
        strout = strin(1:req_length);
    else
        strout = [strin, blanks(req_length - insize)];
    end
end
